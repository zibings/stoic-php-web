#!/usr/bin/env php
<?php

	if (version_compare('8.3.0', PHP_VERSION, '>')) {
		fwrite(STDERR, sprintf("Stoic is only supported on versions of PHP 8.3 or newer." . PHP_EOL . "You are using PHP %s (%s)" . PHP_EOL, PHP_VERSION, PHP_BINARY));

		die(1);
	}

	if (!ini_get('date.timezone')) {
		ini_set('date.timezone', 'UTC');
	}

	foreach (['../../' => '../../', '../vendor/' => '../', 'vendor/' => './'] as $file => $relPath) {
		$path = "{$file}autoload.php";

		if (file_exists($path)) {
			define('STOIC_COMPOSER_INSTALL', $path);
			define('STOIC_COMPOSER_PARENT', $relPath);

			break;
		}
	}

	if (!defined('STOIC_COMPOSER_INSTALL')) {
		fwrite(STDERR, "You need to set up the project dependencies using Composer:" . PHP_EOL . PHP_EOL . "    composer install" . PHP_EOL);

		die(1);
	}

	require(STOIC_COMPOSER_INSTALL);

	global $settings;

	use AndyM84\Config\ConfigContainer;
	use AndyM84\Config\FieldTypes;

	use Stoic\Utilities\ConsoleHelper;
	use Stoic\Utilities\FileHelper;
	use Stoic\Web\Resources\SettingsStrings;

	$settings = new ConfigContainer();
	$ch       = new ConsoleHelper($argv);
	$fh       = new FileHelper(STOIC_COMPOSER_PARENT);

	define('STOIC_LIB_PATH', $fh->folderExists('~/vendor/stoic/web') ? '~/vendor/stoic/web/' : '~/');

	if ($fh->fileExists(Stoic\Web\Resources\StoicStrings::SETTINGS_FILE_PATH)) {
		$settings = new ConfigContainer($fh->getContents(Stoic\Web\Resources\StoicStrings::SETTINGS_FILE_PATH));
	} else {
		$cfgContents = '';
		$required = [
			'configVersion'                    => ['int',   1],
			SettingsStrings::API_CACHE_CONTROL => ['str',   'max-age=500'],
			SettingsStrings::API_CONTENT_TYPE  => ['str',   'application/json'],
			SettingsStrings::CLASSES_EXTENSION => ['str',   '.cls.php'],
			SettingsStrings::CLASSES_PATH      => ['str',   'classes'],
			SettingsStrings::CORS_HEADERS      => ['str',   'Accept, Authorization, Content-Type, X-CSRF-Token, App-Token, Token'],
			SettingsStrings::CORS_METHODS      => ['str',   'GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH'],
			SettingsStrings::CORS_ORIGINS      => ['str[]', '*'],
			SettingsStrings::DB_DSN_DEFAULT    => ['str',   'sqlite::memory:'],
			SettingsStrings::DB_PASS_DEFAULT   => ['str',   '<changeme>'],
			SettingsStrings::DB_USER_DEFAULT   => ['str',   '<changeme>'],
			SettingsStrings::ENABLE_LOGGING    => ['bln',  false],
			SettingsStrings::INCLUDE_PATH      => ['str',   '~/inc'],
			SettingsStrings::MIGRATE_CFG_PATH  => ['str',   '~/migrations/cfg'],
			SettingsStrings::MIGRATE_DB_PATH   => ['str',   '~/migrations/db'],
			SettingsStrings::REPOS_EXTENSION   => ['str',   '.rpo.php'],
			SettingsStrings::REPOS_PATH        => ['str',   'repositories'],
			SettingsStrings::UTILITIES_EXT     => ['str',   '.utl.php'],
			SettingsStrings::UTILITIES_PATH    => ['str',   'utilities']
		];

		foreach ($required as $key => $data) {
			if (!$settings->has($key)) {
				$settings->set($key, $data[1], FieldTypes::fromString($data[0])->getValue());
			}

			if ($key != 'configVersion') {
				$cfgContents .= "{$key}[{$data[0]}] + {$data[1]}" . PHP_EOL;
			}
		}

		$fh->makeFolder($fh->pathJoin('~/logs'), 0777, true);
		$fh->makeFolder($fh->pathJoin('~/migrations'), 0777, true);
		$fh->makeFolder($fh->pathJoin($settings->get(SettingsStrings::MIGRATE_CFG_PATH, '~/migrations/cfg')), 0777, true);
		$fh->makeFolder($fh->pathJoin($settings->get(SettingsStrings::MIGRATE_DB_PATH, '~/migrations/db'), 'drop'), 0777, true);
		$fh->makeFolder($fh->pathJoin($settings->get(SettingsStrings::MIGRATE_DB_PATH, '~/migrations/db'), 'up'), 0777, true);

		if (!$fh->fileExists($fh->pathJoin('~/migrations/cfg', '0-1.cfg'))) {
			$fh->putContents($fh->pathJoin('~/migrations/cfg', '0-1.cfg'), $cfgContents);
		}

		$fh->putContents(Stoic\Web\Resources\StoicStrings::SETTINGS_FILE_PATH, json_encode($settings, JSON_PRETTY_PRINT));
	}

	/**
	 * Create a new API controller in the api directory.
	 *
	 * @param ConsoleHelper $ch
	 * @param FileHelper $fh
	 * @return void
	 */
	function createApi(ConsoleHelper $ch, FileHelper $fh) : void {
		$page = $ch->getParameterWithDefault('a', 'api', '');

		if (empty($page)) {
			fwrite(STDERR, "You must specify a controller name." . PHP_EOL);

			exit(1);
		}

		if (str_starts_with($page, '/')) {
			$page = substr($page, 1);
		}

		if (str_starts_with($page, 'api/')) {
			fwrite(STDERR, "Page cannot start with `api/` as that is the automatic starting directory." . PHP_EOL);

			exit(1);
		}

		if (str_ends_with($page, '.api.php')) {
			fwrite(STDERR, "API controller cannot end with `.api.php` as that is automatically added." . PHP_EOL);

			exit(1);
		}

		$apiFolder = $ch->getParameterWithDefault('f', 'folder', '~/api/1');
		$namespace = $ch->getParameterWithDefault('n', 'namespace', 'Api_1');

		if (!$fh->folderExists($apiFolder)) {
			$fh->makeFolder($apiFolder, 0777, true);
		}

		if ($fh->fileExists($fh->pathJoin($apiFolder, "{$page}.api.php"))) {
			fwrite(STDERR, "Controller already exists." . PHP_EOL);

			exit(1);
		}

		$pageName           = $page;
		$controllerContents = $fh->getContents(STOIC_LIB_PATH . '/Templates/api-endpoint.php');
		$controllerContents = str_replace(
			['{$namespace}', '{$className}'],
			[$namespace, $pageName],
			$controllerContents
		);

		$fh->putContents($fh->pathJoin($apiFolder, "{$page}.php"), $controllerContents);

		fwrite(STDOUT, "Controller '$page.api.php' created." . PHP_EOL);

		$webFolder = str_replace('~/api', '~/web/api', $apiFolder);

		if (!$fh->folderExists($webFolder)) {
			$fh->makeFolder($webFolder, 0777, true);

			$corePath = "../";

			if (str_contains($page, '/')) {
				$parts    = explode('/', $page);
				$corePath = str_repeat('../', count($parts) + 1);
			}

			$webContents = $fh->getContents(STOIC_LIB_PATH . '/Templates/api-index.php');
			$webContents = str_replace(
				['{$corePath}', '{$namespace}', '{$apiFolder}'],
				[$corePath, $namespace, $apiFolder],
				$webContents
			);

			$fh->putContents($fh->pathJoin($webFolder, "index.php"), $webContents);

			fwrite(STDOUT, "Web API index page created at '$webFolder/index.php'." . PHP_EOL);
		}

		return;
	}

	/**
	 * Create a new page in the web directory.
	 *
	 * @param ConsoleHelper $ch
	 * @param FileHelper $fh
	 * @return void
	 */
	function createPage(ConsoleHelper $ch, FileHelper $fh) : void {
		$page = $ch->getParameterWithDefault('p', 'page', '');

		if (empty($page)) {
			fwrite(STDERR, "You must specify a page name." . PHP_EOL);

			exit(1);
		}

		if (str_starts_with($page, '/')) {
			$page = substr($page, 1);
		}

		if (str_starts_with($page, 'web/')) {
			fwrite(STDERR, "Page cannot start with `web/` as that is the automatic starting directory." . PHP_EOL);

			exit(1);
		}

		if (str_ends_with($page, '.php')) {
			fwrite(STDERR, "Page cannot end with `.php` as that is automatically added." . PHP_EOL);

			exit(1);
		}

		if (!$fh->folderExists('~/web')) {
			$fh->makeFolder('~/web', 0777, true);
		}

		if ($fh->fileExists($fh->pathJoin('~/web', "{$page}.php"))) {
			fwrite(STDERR, "Page already exists." . PHP_EOL);

			exit(1);
		}

		$pageName = $page;
		$corePath = "../";

		if (str_contains($page, '/')) {
			$parts = explode('/', $page);
			$last  = array_pop($parts);

			$folder = $fh->pathJoin('~/web', ...$parts);

			if (!$fh->folderExists($folder)) {
				$fh->makeFolder($folder, 0777, true);
			}

			$pageName = $last;
			$corePath = str_repeat('../', count($parts) + 1);
		}

		if (!$fh->folderExists($fh->pathJoin('~/tpl', $page))) {
			$fh->makeFolder($fh->pathJoin('~/tpl', $page), 0777, true);
		}

		$pageContents = $fh->getContents(STOIC_LIB_PATH . '/Templates/site-endpoint.php');

		$pageContents = str_replace(
			['{$corePath}', '{$page}', '{$pageName}'],
			[$corePath, $page, $pageName],
			$pageContents
		);

		$fh->putContents($fh->pathJoin('~/web', "{$page}.php"), $pageContents);
		$fh->putContents(
			$fh->pathJoin('~/tpl', $page, "index.tpl.php"),
			$fh->getContents(STOIC_LIB_PATH . '/Templates/index.tpl.php')
		);

		fwrite(STDOUT, "Page '$page.php' created." . PHP_EOL);

		return;
	}

	/**
	 * Create a new site with the default index page, template, and folders.
	 *
	 * @param ConsoleHelper $ch
	 * @param FileHelper $fh
	 * @return void
	 */
	function createSite(ConsoleHelper $ch, FileHelper $fh) : void {
		global $settings;

		$incPath = $settings->get(SettingsStrings::INCLUDE_PATH, '~/inc');

		$tplPath = $fh->pathJoin('~/tpl', 'index');
		$clsPath = $fh->pathJoin($incPath, $settings->get(SettingsStrings::CLASSES_PATH, 'classes'));
		$rpoPath = $fh->pathJoin($incPath, $settings->get(SettingsStrings::REPOS_PATH, 'repositories'));
		$utlPath = $fh->pathJoin($incPath, $settings->get(SettingsStrings::UTILITIES_PATH, 'utilities'));

		$fh->makeFolder($tplPath, 0777, true);
		$fh->makeFolder($incPath, 0777, true);
		$fh->makeFolder($clsPath, 0777, true);
		$fh->makeFolder($rpoPath, 0777, true);
		$fh->makeFolder($utlPath, 0777, true);
		$fh->makeFolder('~/web',  0777, true);

		if (!$fh->fileExists('~/web/index.php')) {
			createPage(new ConsoleHelper([
				'stoic-create',
				'-p', 'index'
			]), $fh);
		}

		if (!$fh->fileExists('~/inc/core.php')) {
			$fh->putContents('~/inc/core.php', $fh->getContents(STOIC_LIB_PATH . '/Templates/core.php'));

			fwrite(STDOUT, "Core file created at '~/inc/core.php'." . PHP_EOL);
		}

		fwrite(STDOUT, "Site created." . PHP_EOL);

		return;
	}

	$createScripts = [
		[
			'args' => ['p', 'page'],
			'desc' => 'Create a new page in the web directory.',
			'func' => 'createPage'
		],
		[
			'args' => ['s', 'site'],
			'desc' => 'Create a new site with the default index page and template.',
			'func' => 'createSite'
		],
		[
			'args' => ['a', 'api'],
			'desc' => 'Create a new API endpoint with the default index page and template.',
			'func' => 'createApi'
		],
		[
			'args' => ['h', 'help'],
			'desc' => 'Show this help message.',
			'func' => function(ConsoleHelper $ch, FileHelper $fh) {
				fwrite(STDOUT, "Usage: stoic-create [options]" . PHP_EOL . PHP_EOL);
				fwrite(STDOUT, "Options:" . PHP_EOL);
				fwrite(STDOUT, "    -p, --page <name>                         Create a new page in the web directory." . PHP_EOL);
				fwrite(STDOUT, "    -s, --site                                Create a new site with the default index page and template." . PHP_EOL);
				fwrite(STDOUT, "    -a, --api <name> --namespace <namespace>  Create a new API endpoint with the default index page and template." . PHP_EOL);
				fwrite(STDOUT, "    -h, --help                                Show this help message." . PHP_EOL);
				fwrite(STDOUT, PHP_EOL . "Examples:" . PHP_EOL);
				fwrite(STDOUT, "    vendor/bin/stoic-create --page index" . PHP_EOL);
				fwrite(STDOUT, "    vendor/bin/stoic-create --site" . PHP_EOL);
				fwrite(STDOUT, "    vendor/bin/stoic-create --api users --namespace Api --folder " . PHP_EOL);
				fwrite(STDOUT, PHP_EOL . "For more information, please visit the Stoic Framework documentation at https://stoic-framework.com/" . PHP_EOL);

				exit(0);
			}
		]
	];

	foreach ($createScripts as $script) {
		if ($ch->hasShortLongArg(...$script['args'])) {
			if (is_callable($script['func'])) {
				$script['func']($ch, $fh);
			} else {
				fwrite(STDERR, "This script is not yet implemented." . PHP_EOL);
			}

			exit(0);
		}
	}
